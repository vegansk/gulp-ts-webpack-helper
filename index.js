const gulp = require("gulp");
const sourcemaps = require("gulp-sourcemaps");
const ts = require("gulp-typescript");
const webpackStream = require("webpack-stream");
const webpack = require("webpack");
const WebpackDevServer = require("webpack-dev-server");
const gulpWatch = require("gulp-watch");
const clean = require("gulp-dest-clean");
const plumber = require("gulp-plumber");
const spawn = require("child_process").spawn;
const fs = require("fs");
const gutil = require("gulp-util");
const process = require("process");
const path = require("path");

function parseConfig(cfg) {
  const res = {};

  // Source directory
  res.srcDir = cfg.srcDir || "src";
  // Where to place files generated by tsc
  res.tsOutDir = cfg.tsOutDir || "build/tmp";
  // Where to place files generated by webpack
  res.outDir = cfg.webpackOutDir || "build/dist";
  // tsconfig.json location or the object with parameters
  res.tsconfig = cfg.tsconfig || {};

  // Port for webpack dev server
  res.devServerPort = cfg.devServerPort || parseInt(process.env.PORT || "8080");

  // Compile js files with tsc
  res.allowJs = cfg.allowJs === undefined ? true : !!cfg.allowJs;

  return res;
}

module.exports = function(userConfig = {}) {

  const config = parseConfig(userConfig);

  const srcGlob = [
    `${config.srcDir}/**/*.ts`,
    `${config.srcDir}/**/*.tsx`
  ].concat(
    config.allowJs
      ? [
        `${config.srcDir}/**/*.js`,
        `${config.srcDir}/**/*.jsx`
      ]
      : []
  );

  const tsOutDir = (target) => path.join(config.tsOutDir, target);

  const tsTask = (target, { watch = false } = {}) => () => {
    const tsProject = ts.createProject(config.tsconfig);

    const task = () => gulp.src(srcGlob)
          .pipe(plumber())
          .pipe(sourcemaps.init())
          .pipe(tsProject())
          .pipe(sourcemaps.write(".", {
            includeContent: false,
            sourceRoot: path.relative(tsOutDir(target), config.srcDir)
          }))
          .pipe(gulp.dest(tsOutDir(target)));

    if(watch) {
      return gulpWatch(srcGlob, { verbose: true }, task);
    } else
      return task;
  };

  const scriptName = (name) => path.normalize(process.platform === 'win32' ? `${name}.cmd` : name);

  const tsExecTask = (target, { watch = false } = {}) => (cb) => {
    if(typeof config.tsconfig !== "string") {
      cb(new Error("tsconfig property must be the path when using tsExecTask"));
      return;
    }
    const args = ["--outDir", tsOutDir(target), "-p", config.tsconfig].concat(
      watch ? ["--watch"] : []
    );
    const tsc = spawn(scriptName("./node_modules/.bin/tsc"), args, { stdio: "inherit", shell: true });
    tsc.on("close", (code) => {
      if(code !== 0)
        cb(new Error(`tsc exited with the code ${code}`));
      else
        cb();
    });
  };


  return {
    tsTask,
    tsExecTask
  };

};
